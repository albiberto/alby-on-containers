@using ProductDataManager.Infrastructure
@using ProductDataManager.Validators

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.LibraryAdd" Class="mr-3 mb-n1"/>
            Add Category
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@form" Model="@model" Validation="@(Validator.ValidateValue)" ValidationDelay="1000">
            <MudTextField @bind-Value="model.Name" For="@(() => model.Name)" Label="Name" />
            <MudTextField @bind-Value="model.Description" For="@(() => model.Description)" Label="Description" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Dark" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="Submit">Add</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] public required ProductContext Context { get; set; }
    [Inject] public required CategoryValidator Validator { get; set; }
    
    [CascadingParameter] public required MudDialogInstance MudDialog { get; set; }

    MudForm? form;
    readonly Model model = new();

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        if(form is null) return;
        
        await form.Validate();
        if (form.IsValid) MudDialog.Close(DialogResult.Ok(model));
    }
    
    public class Model
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}