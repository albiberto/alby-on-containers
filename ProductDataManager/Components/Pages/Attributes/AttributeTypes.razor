@page "/attributes"
@using ProductDataManager.Components.Pages.Attributes.Model
@using ProductDataManager.Components.Shared.Model
@using ProductDataManager.Validators
@using ProductDataManager.Components.Shared.Filters


<PageTitle>Attributes</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Attributes</MudText>

<MudDataGrid T="AggregateModel" Items="@Model.Aggregates" ReadOnly="@false"
             EditMode="@DataGridEditMode.Cell" EditTrigger="@DataGridEditTrigger.OnRowClick"
             FilterMode="DataGridFilterMode.ColumnFilterRow" Filterable="true" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
             SortMode="SortMode.Single" RowsPerPage="10" 
             Bordered="true" Elevation="1">
    <ToolBarContent>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Save" OnClick="() => SaveAsync()" Disabled="DisableSave">Save</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.ClearAll" OnClick="() => ClearAll()" Disabled="DisableClearAll">Clear All</MudButton>
    </ToolBarContent>
    
    <Columns>
        <HierarchyColumn T="AggregateModel"/>
        
        <TemplateColumn IsEditable="false" Sortable="false" Filterable="true" CellStyle="width: 100px;">
            <FilterTemplate>
                <StateFilter T="AggregateModel" Context="context" />
            </FilterTemplate>
            <CellTemplate>
                <MudStack Row="true" Justify="Justify.Center">
                    <MudTooltip Text="@context.Item.Status.Current.GetTooltip()" Delay="1000" Color="Color.Dark" Placement="Placement.Bottom">
                        @if (context.Item.IsValid)
                        {
                            <MudIcon Icon="@context.Item.Status.Current.GetOutlinedIcon()"/>
                        }
                        else
                        {
                            <MudBadge Origin="@Origin.BottomRight" Color="Color.Warning" Overlap="true" Icon="@Icons.Material.Rounded.Warning">
                                <MudIcon Icon="@context.Item.Status.Current.GetOutlinedIcon()"/>
                            </MudBadge>
                        }
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        
        <PropertyColumn Property="data => data.AttributeType.Name">
            <EditTemplate>
                <MudTextField
                    T="string"
                    Value="@context.Item.AttributeType.Name"
                    ValueChanged="@(async name => { context.Item.AttributeType.Name = name; await UpdateAttributeTypeAsync(context.Item); })"
                    Variant="Variant.Text"
                    Class=@(context.Item.AttributeType.Status.IsDeleted ? "strikethrough" : "")
                    Validation="StringValidators.Name().Validation"
                    Immediate="true"
                    MaxLength="30"/>
            </EditTemplate>
        </PropertyColumn>
        
        <PropertyColumn Property="data => data.AttributeType.Description">
            <EditTemplate>
                <MudTextField
                    T="string"
                    Value="@context.Item.AttributeType.Description"
                    ValueChanged="@(async description => { context.Item.AttributeType.Description = description; await UpdateAttributeTypeAsync(context.Item); })"
                    Variant="Variant.Text"
                    Class=@(context.Item.AttributeType.Status.IsDeleted ? "strikethrough" : "")
                    Validation="StringValidators.Description().Validation"
                    Immediate="true"
                    MaxLength="100"/>
            </EditTemplate>
        </PropertyColumn>
        
        <TemplateColumn IsEditable="false" Filterable="false" Sortable="false">
            <HeaderTemplate>
                <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Add" OnClick="() => AddAttrTypeAsync()">Add</MudButton>
            </HeaderTemplate>
            <CellTemplate>
                @if ((context.Item.AttributeType.Status.IsModified && context.Item.AttributeType.IsDirty) || context.Item.AttributeType.Status.IsDeleted)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Clear" Color="Color.Dark" OnClick="@(_ => ClearAsync(context.Item))"/>
                }
                @if (context.Item.Status is { IsDeleted: false })
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Dark" OnClick="@(_ => DeleteAttributeTypeAsync(context.Item))"/>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    
    <ChildRowContent>
        <Attributes @bind-Aggregate="context.Item"/>
    </ChildRowContent>
    
    <PagerContent>
        <MudDataGridPager T="AttributeTypeModel" />
    </PagerContent>
    
</MudDataGrid>