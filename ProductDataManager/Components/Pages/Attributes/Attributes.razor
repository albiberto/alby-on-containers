@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using ProductDataManager.Components.Shared.Model

<MudDataGrid T="Model<ProductDataManager.Domain.Aggregates.AttributeAggregate.Attribute>" Items="Items" ReadOnly="@false"
             EditMode="@DataGridEditMode.Cell" EditTrigger="@DataGridEditTrigger.OnRowClick"
             Filterable="false"
             SortMode="SortMode.Single" RowsPerPage="10" 
             Bordered="true" Elevation="0" Dense="true" Groupable="true">
    <Columns>
        <TemplateColumn IsEditable="false" Sortable="false">
            <CellTemplate>
                <MudTooltip Text="@context.Item.State.GetTooltip()" Delay="1000" Color="Color.Dark" Placement="Placement.Bottom">
                    @if (context.Item.IsValid)
                    {
                        <MudIcon Icon="@context.Item.State.GetOutlinedIcon()"/>
                    }
                    else
                    {
                        <MudBadge Origin="@Origin.BottomRight" Color="Color.Warning" Overlap="true" Icon="@Icons.Material.Rounded.Warning">
                            <MudIcon Icon="@context.Item.State.GetOutlinedIcon()"/>
                        </MudBadge>
                    }
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
        
        <PropertyColumn Property="data => data.Entity.Name">
            <EditTemplate>
                <MudTextField
                    T="string"
                    @bind-Value="@context.Item.Entity.Name"
                    Variant="Variant.Text"
                    Class=@(context.Item.State is EntityState.Deleted ? "strikethrough" : "")
                    Disabled="context.Item.State is EntityState.Deleted"
                    Error="context.Item.Validation(data => data.Name) is not null"
                    ErrorText="@context.Item.Validation(data => data.Name)?.ErrorMessage"
                    Immediate="true"
                    MaxLength="30"/>
            </EditTemplate>
        </PropertyColumn>
        
        <PropertyColumn Property="data => data.Entity.Description">
            <EditTemplate>
                <MudTextField
                    T="string"
                    @bind-Value="@context.Item.Entity.Description"
                    Variant="Variant.Text"
                    Class=@(context.Item.State is EntityState.Deleted ? "strikethrough" : "")
                    Disabled="context.Item.State is EntityState.Deleted"
                    Error="context.Item.Validation(data => data.Description) is not null"
                    ErrorText="@context.Item.Validation(data => data.Description)?.ErrorMessage"
                    Immediate="true"
                    MaxLength="100"/>
            </EditTemplate>
        </PropertyColumn>

        <PropertyColumn Property="data => data.Entity.TypeId">
            <EditTemplate>

                <MudSelect T="Guid"
                           Placeholder="Change parent ..."
                           @bind-Value="@context.Item.Entity.TypeId"
                           Class=@(context.Item.State is EntityState.Deleted ? "strikethrough" : "")
                           Disabled="context.Item.State is EntityState.Deleted"
                           Immediate="true">
                    @foreach (var type in Types)
                    {
                        <MudSelectItem Value="@type.Entity.Id">@type.Entity.Name</MudSelectItem>
                    }
                </MudSelect>

            </EditTemplate>
        </PropertyColumn>
        
        <TemplateColumn IsEditable="false" Filterable="false" Sortable="false">
            <HeaderTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Size="Size.Medium" Color="Color.Secondary" OnClick="Add"/>
            </HeaderTemplate>
            <CellTemplate>
                @if (context.Item.State is EntityState.Modified or EntityState.Deleted)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Clear" Color="Color.Dark" OnClick="@(_ => context.Item.Clear())"/>
                }
                @if (context.Item.State is not EntityState.Deleted)
                {
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Dark" OnClick="@(_ => context.Item.Delete())"/>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>
